name: Build and Test Charts

on:
  push:
    branches:
      - main
      - feature/*
      - fix/*
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      commit_id:
        description: 'Full commit ID for installation and testing (default: latest commit). e.g daae94a0f72a13f7092812fa42d684b2af827xxx. WARNING: release job will NOT run by this trigger'
        type: string
      wait_seconds:
        description: 'Wait seconds before cleanup (max 3600)'
        type: number
        default: 600
      stacked_charts_branch:
        description: "Stacked charts repo's branch to clone"
        type: string
        default: master

env:
  COMMIT_FULL_ID: ${{ inputs.commit_id || github.sha }}
  WAIT_SECONDS: ${{ inputs.wait_seconds || 600 }} 
  STACKED_CHARTS_BRANCH: ${{ inputs.stacked_charts_branch || 'master' }}


jobs:  
  check_charts:
    runs-on: ubuntu-dind
    permissions:
      contents: read
      packages: write
    outputs:
      no_ci: ${{ steps.check_no_ci.outputs.no_ci || 'false' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ env.COMMIT_FULL_ID }}
        fetch-depth: 2

    - name: Check commit message
      id: check_no_ci
      run: |
        commit_message=$(git log --pretty=format:"%H %s %b" | grep "${{ env.COMMIT_FULL_ID }}" | sed 's,'${{ env.COMMIT_FULL_ID }}' ,,g')
        if [[ "$commit_message" =~ .*"no-ci".* ]]; then
            echo "Found 'no-ci' in commit message. Stop workflow !!!"
            echo "no_ci=true" >> $GITHUB_OUTPUT
        fi

    - name: Get changed charts
      if: ${{ steps.check_no_ci.outputs.no_ci != 'true' }}
      id: get_changed_charts
      run: |
        GITHUB_COMPARE_BRANCH="main"
        git fetch origin $GITHUB_COMPARE_BRANCH
        if [ "${{ github.ref_name }}" == "main" ]; then
          GITHUB_COMPARE_BRANCH="main^"
        fi
        get_changed_charts=`git diff ${{ env.COMMIT_FULL_ID }} "origin/$GITHUB_COMPARE_BRANCH" --name-only | grep -oE "^kubernetes/(\w+[-]?)+(\w+)" | grep -oE "(\w+[-]?)+(\w+)$" | grep -v README| sort -u`
        changed_charts=$(echo $get_changed_charts | tr " " ",")
        changed_charts="$(echo -e "$changed_charts" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
        echo "Changed charts: $changed_charts"
        echo "changed_charts=$changed_charts" >> $GITHUB_OUTPUT

    - name: Checkout stacked_charts 
      if: ${{ steps.check_no_ci.outputs.no_ci != 'true' && steps.get_changed_charts.outputs.changed_charts != '' }}
      uses: actions/checkout@v4
      with:
        repository: '${{ github.repository_owner }}/stacked_charts'
        token: ${{ secrets.PUSH_TOKEN }}
        path: stacked_charts
        ref: ${{ env.STACKED_CHARTS_BRANCH }}
    
    - name: "Check stacked charts: NMAA"
      if: ${{ steps.check_no_ci.outputs.no_ci != 'true' && steps.get_changed_charts.outputs.changed_charts != '' }}
      run: |
        echo "Changed charts: ${{ steps.get_changed_charts.outputs.changed_charts}}"
        changed_charts="${{ steps.get_changed_charts.outputs.changed_charts}}"
        mappingFile="${{ github.workspace }}/stacked_charts//kubernetes/nmaa/image_chart_mapping.yml"
        found=0
        IFS=',' read -ra items <<< "$changed_charts"

        for item in "${items[@]}"; do
            echo "Checking if '$item' exists in $mappingFile"
            if grep -q "$item" "$mappingFile"; then
                echo "Found '$item' in $mappingFile"
                found=1
                break
            fi
        done

        if [ "$found" -eq 1 ]; then
            echo "At least one chart was found in the nmaa mapping file."
        else
            echo "No charts found in the nmaa mapping file."
        fi

    - name: Init build_vars.yml file
      if: ${{ steps.check_no_ci.outputs.no_ci != 'true' }}
      run: |
        # touch ${{ github.workspace }}/build_vars.yml
        
        cat << EOF > ${{ github.workspace }}/build_vars.yml
        build_id: "."
        build_vars_path: "${{ github.workspace }}"
        # commit: "$GIT_COMMIT"
        # comment: "$commit_comment"
        build_var_path: ${{ github.workspace }}/build_vars.yml
        # repo_path: $REPO_PATH
        # git_branch: $GIT_BRANCH
        # git_url: $GIT_URL
        ROLE: "automation"
        # MODE: $MODE
        # NEW_ENV: $NEW_ENV
        # NEW_TOPO: $NEW_TOPO
        # CLEANUP_ENV: $CLEANUP_ENV
        # CLEANUP_TOPO: $CLEANUP_TOPO
        # INSTALLATION_REPO_TAG: $INSTALLATION_REPO_TAG
        # AUTOMATION_REPO_TAG: $branch
        STACKED_CHARTS_BRANCH: $STACKED_CHARTS_BRANCH
        PUBLIC_HELMCHARTS_REPO_TAG: main
        charts: ${{ steps.get_changed_charts.outputs.changed_charts }}
        EOF

    - name: Upload artifact
      if: always() && !cancelled()
      uses: actions/upload-artifact@v4
      with:
        name: build_vars
        path: ${{ github.workspace }}/build_vars.yml

  # cleanup:
  #   runs-on: ansible-dind
  #   needs: get_changed_charts
  #   if: needs.get_changed_charts.outputs.no_ci != 'true'
  #   # if: always() && !cancelled()
  #   steps:
  #   - name: test
  #     run: |
  #       echo "testing"
#       - name: Wait before cleanup
#         continue-on-error: true
#         run: |
#           if [ ${{ env.WAIT_SECONDS }} -gt 3600 ]; then
#             echo "Wait seconds is too long, set to 3600"
#             echo "WAIT_SECONDS=3600" >> $GITHUB_ENV
#           fi
#           echo "Wait seconds: ${{ env.WAIT_SECONDS }}"
#           echo "Waiting before cleanup..."
#           sleep ${{ env.WAIT_SECONDS }}

#       - name: Checkout SVTECH_CI_utilities 
#         uses: actions/checkout@v4
#         with:
#           repository: '${{ github.repository_owner }}/SVTECH_CI_utilities'
#           token: ${{ secrets.PUSH_TOKEN }}
#           path: SVTECH_CI_utilities
#           ref: dev-jenkins

#       - name: Download build_vars artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: build_vars
#           path: ${{ github.workspace }}

#       - name: Cleanup Environment
#         run: |
#          ansible-playbook ${{ github.workspace }}/SVTECH_CI_utilities/auto_testing/vm--cleanup_vms.yml -e "BUILD_ID=. BUILD_VARS_PATH=${{ github.workspace }}"
    